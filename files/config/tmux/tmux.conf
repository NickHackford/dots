set -g default-terminal "tmux-256color"
set-option -sa terminal-overrides ",xterm*:Tc"

unbind C-b
set -g prefix C-space
bind C-Space send-prefix

set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on
set -sg escape-time 0
set-option -g status-position top

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'tmux-plugins/tmux-yank'

source-file ~/.config/tmux/theme.tmux

# set vi mode
set-window-option -g mode-keys vi
set -g mouse on

bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle

bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Keybindings
bind r source-file ~/.config/tmux/tmux.conf

# smart pane switching/resizing with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"

bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"

bind -r h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys :TmuxResizeLeft Enter) || tmux resize-pane -L 10"
bind -r j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys :TmuxResizeDown Enter) || tmux resize-pane -D 5"
bind -r k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys :TmuxResizeUp Enter) || tmux resize-pane -U 5"
bind -r l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys :TmuxResizeRight Enter) || tmux resize-pane -R 10"

# Open panes in current directory
bind c new-window -c "#{pane_current_path}"
bind % split-window -v -c "#{pane_current_path}"
bind \" split-window -h -c "#{pane_current_path}"

# clear
bind C-l send-keys 'C-l'
bind C-k send-keys -R \; clear-history\; send-keys 'C-l'

# scrollback to vim
bind v run-shell -b "tmux capture-pane -pS -2000 > /tmp/scrollback.sh; tmux neww nvim /tmp/scrollback.sh"

bind u run-shell -b "tmux capture-pane -J -p | grep -oE '(https?):\/\/[^\s]*[^>]' | fzf-tmux -d20 --multi --bind alt-a:select-all,alt-d:deselect-all | xargs xdg-open &> /dev/null &"

bind Space run-shell "tmux neww tmux_sessionizer"
bind C-f run-shell "tmux neww vim_opener"
bind P run-shell 'tmux neww; for win in nvim claude shell lazygit; do tmux kill-window -t "$win" 2>/dev/null; done'
# Home pane based on current command
bind C-p run-shell '\
    current_pane=$(tmux display-message -p \"#{pane_id}\"); \
    start_cmd=$(tmux display-message -p -t $current_pane \"#{pane_start_command}\"); \
    if echo "$start_cmd" | grep -q ": claude"; then \
        if ! tmux list-windows | grep -q "claude"; then \
            tmux break-pane -n "claude"; \
        else \
            tmux move-pane -h -t :claude; \
        fi; \
    elif echo "$start_cmd" | grep -q ": vi"; then \
        if ! tmux list-windows | grep -q "nvim"; then \
            tmux break-pane -n "nvim"; \
        else \
            tmux move-pane -h -t :nvim; \
        fi; \
    elif echo "$start_cmd" | grep -qE ": (lg|lazygit)"; then \
        if ! tmux list-windows | grep -q "lazygit"; then \
            tmux break-pane -n "lazygit"; \
        else \
            tmux move-pane -h -t :lazygit; \
        fi; \
    else \
        if ! tmux list-windows | grep -q "shell"; then \
            tmux break-pane -n "shell"; \
        else \
            tmux move-pane -h -t :shell; \
        fi; \
    fi; \
    current_at_1=$(tmux list-windows -F "#{window_index}:#{window_name}" | grep "^1:" | cut -d: -f2 2>/dev/null || echo ""); \
    if tmux list-windows | grep -q "nvim" && [ "$current_at_1" != "nvim" ]; then \
        tmux swap-window -s :nvim -t 1 2>/dev/null || true; \
    fi; \
    current_at_2=$(tmux list-windows -F "#{window_index}:#{window_name}" | grep "^2:" | cut -d: -f2 2>/dev/null || echo ""); \
    if tmux list-windows | grep -q "claude" && [ "$current_at_2" != "claude" ]; then \
        tmux swap-window -s :claude -t 2 2>/dev/null || true; \
    fi; \
    current_at_3=$(tmux list-windows -F "#{window_index}:#{window_name}" | grep "^3:" | cut -d: -f2 2>/dev/null || echo ""); \
    if tmux list-windows | grep -q "shell" && [ "$current_at_3" != "shell" ]; then \
        tmux swap-window -s :shell -t 3 2>/dev/null || true; \
    fi; \
    current_at_4=$(tmux list-windows -F "#{window_index}:#{window_name}" | grep "^4:" | cut -d: -f2 2>/dev/null || echo ""); \
    if tmux list-windows | grep -q "lazygit" && [ "$current_at_4" != "lazygit" ]; then \
        tmux swap-window -s :lazygit -t 4 2>/dev/null || true; \
    fi;'

bind C-v run-shell "if tmux list-windows | grep -q nvim; then tmux select-window -t nvim; else tmux new-window -n nvim ': nvim; zsh -ic vi'; fi"
bind V run-shell "if tmux list-windows | grep -q nvim; then tmux join-pane -hs nvim; else tmux new-window -n nvim 'nvim'; tmux join-pane -hs nvim; fi"

bind C-a run-shell "if tmux list-windows | grep -q claude; then tmux select-window -t claude; else tmux new-window -n claude ': claude; zsh -ic claude'; fi"
bind A run-shell "if tmux list-windows | grep -q claude; then tmux join-pane -hs claude; else tmux new-window -n claude 'claude'; tmux join-pane -hs claude; fi"

bind S run-shell "if tmux list-windows | grep -q shell; then tmux join-pane -hs shell; else tmux new-window -n shell; tmux join-pane -hs shell; fi"

bind C-g run-shell "if tmux list-windows | grep -q lazygit; then tmux select-window -t lazygit; else tmux new-window -n lazygit 'zsh -ic lg; exec zsh'; fi"
bind G run-shell "if tmux list-windows | grep -q lazygit; then tmux join-pane -hs lazygit; else tmux new-window -n lazygit 'zsh -i -c lg'; tmux join-pane -hs lazygit; fi"

bind b new-window -n btop "btop"
bind y new-window -n yazi "zsh -i -c 'y; exec zsh'"
bind Y new-window -n yazi "yazi"
bind z new-window -n zoxide "zsh -i -c 'zi; exec zsh'"

run '~/.tmux/plugins/tpm/tpm'
