set -g default-terminal "tmux-256color"
set-option -sa terminal-overrides ",xterm*:Tc"

unbind C-b
set -g prefix C-space
bind C-Space send-prefix

set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1
set-option -g renumber-windows on
set -sg escape-time 0
set-option -g status-position top

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

set -g @plugin 'tmux-plugins/tmux-yank'

source-file ~/.config/tmux/theme.tmux

# set vi mode
set-window-option -g mode-keys vi
set -g mouse on

bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle

bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# Keybindings
bind r source-file ~/.config/tmux/tmux.conf

# smart pane switching/resizing with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"

bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"

bind -r h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys :TmuxResizeLeft Enter) || tmux resize-pane -L 10"
bind -r j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys :TmuxResizeDown Enter) || tmux resize-pane -D 5"
bind -r k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys :TmuxResizeUp Enter) || tmux resize-pane -U 5"
bind -r l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys :TmuxResizeRight Enter) || tmux resize-pane -R 10"

# Open panes in current directory
bind c new-window -c "#{pane_current_path}"
bind % split-window -v -c "#{pane_current_path}"
bind \" split-window -h -c "#{pane_current_path}"

# clear
bind C-l send-keys 'C-l'
bind C-k send-keys -R \; clear-history\; send-keys 'C-l'

# scrollback to vim
bind v run-shell -b "tmux capture-pane -pS -2000 > /tmp/scrollback.sh; tmux neww nvim /tmp/scrollback.sh"

bind u run-shell -b "tmux capture-pane -J -p | grep -oE '(https?):\/\/[^\s]*[^>]' | fzf-tmux -d20 --multi --bind alt-a:select-all,alt-d:deselect-all | xargs xdg-open &> /dev/null &"

bind Space run-shell "tmux neww tmux_sessionizer"
bind C-f display-popup -E -w 99% -h 99% 'vim_opener'
bind P run-shell "kill_project"
bind C-p run-shell "tmux_organize_windows"

bind C-! run-shell "if tmux list-windows -t '#S' | awk 'NR==1 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==1 {print \$1}' | tr -d ':'); fi"
bind C-q run-shell "if tmux list-windows -t '#S' | awk 'NR==1 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==1 {print \$1}' | tr -d ':'); fi"
bind C-@ run-shell "if tmux list-windows -t '#S' | awk 'NR==2 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==2 {print \$1}' | tr -d ':'); fi"
bind C-w run-shell "if tmux list-windows -t '#S' | awk 'NR==2 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==2 {print \$1}' | tr -d ':'); fi"
bind C-# run-shell "if tmux list-windows -t '#S' | awk 'NR==3 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==3 {print \$1}' | tr -d ':'); fi"
bind C-e run-shell "if tmux list-windows -t '#S' | awk 'NR==3 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==3 {print \$1}' | tr -d ':'); fi"
bind C-$ run-shell "if tmux list-windows -t '#S' | awk 'NR==4 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==4 {print \$1}' | tr -d ':'); fi"
bind C-r run-shell "if tmux list-windows -t '#S' | awk 'NR==4 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==4 {print \$1}' | tr -d ':'); fi"
bind C-% run-shell "if tmux list-windows -t '#S' | awk 'NR==5 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==5 {print \$1}' | tr -d ':'); fi"
bind C-t run-shell "if tmux list-windows -t '#S' | awk 'NR==5 {print \$1}' | grep -q .; then tmux join-pane -hs \$(tmux list-windows -t '#S' | awk 'NR==5 {print \$1}' | tr -d ':'); fi"

bind C-v run-shell "tmux_nvim"
bind C-a run-shell "tmux_agent"
bind A display-popup -E -w 99% -h 99% 'tmux_project_pane_peeker agent'
bind C-s run-shell "tmux_shell"
bind S display-popup -E -w 99% -h 99% 'tmux_project_pane_peeker shell'
bind C-g run-shell "tmux_lazygit"
bind C-y run-shell "tmux_yazi"
bind y run-shell "yazi"

bind t display-popup -d '#{pane_current_path}' -E -w 99% -h 99% 'tmux_tasks'
bind T run-shell "tmux_pop_task"

bind b new-window -n btop "btop"
bind z new-window -n zoxide "zsh -i -c 'zi; exec zsh'"

run '~/.tmux/plugins/tpm/tpm'
