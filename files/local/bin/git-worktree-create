#!/usr/bin/env bash

git_dir=$(git rev-parse --git-common-dir 2>/dev/null) || {
  echo "Not in a git repo"
  exit 1
}

# For worktree structure: my_project/master/, my_project/feature/
# git-common-dir points to my_project/master/.git
# We need to go up two levels: .git -> master -> my_project
# Use realpath to ensure we get absolute paths
git_dir_abs="$(realpath "$git_dir")"
worktree_dir="$(dirname "$git_dir_abs")"
top="$(dirname "$worktree_dir")"

if [ $# -ne 0 ]; then
  # Check if argument is a GitHub URL
  if [[ "$1" =~ ^https://git\.hubteam\.com/.*/(issues|pull)/[0-9]+$ ]]; then
    # Extract repo and issue/PR ID from URL
    GITHUB_URL="$1"
    ISSUE_REPO=$(echo "$GITHUB_URL" | sed -n 's|https://git\.hubteam\.com/\([^/]*/[^/]*\)/.*|\1|p')
    ISSUE_ID=$(echo "$GITHUB_URL" | sed -n 's|.*/\([0-9][0-9]*\)$|\1|p')
    
    echo "Detected GitHub URL - Repo: $ISSUE_REPO, Issue/PR: $ISSUE_ID"
    
    # Fetch issue title first
    TITLE=$(gh issue view "$ISSUE_ID" --repo "$ISSUE_REPO" --json title --jq .title 2>/dev/null || gh pr view "$ISSUE_ID" --repo "$ISSUE_REPO" --json title --jq .title)
    
    if [ $? -ne 0 ] || [ -z "$TITLE" ]; then
      echo "Failed to fetch title from GitHub. Using repo and issue/PR ID."
      REPO_NAME=$(basename "$ISSUE_REPO")
      branch="nh-${ISSUE_ID}-${REPO_NAME}"
    else
      echo "Fetched title: $TITLE"
      
      # Sanitize the title for the branch name
      # Handle special characters safely, replace non-alphanumeric with '-', collapse '-', trim '-', lowercase, truncate
      SANITIZED_TITLE=$(echo "$TITLE" |
        sed -e 's/[^a-zA-Z0-9 ]/-/g' |
        sed -e 's/ /-/g' |
        tr -s '-' |
        sed -e 's/^-//' -e 's/-$//' |
        tr '[:upper:]' '[:lower:]' |
        cut -c 1-60 |
        sed 's/-$//') # Ensure truncation didn't leave a trailing hyphen
      
      # Include issue ID to ensure branch name uniqueness
      branch="nh-${ISSUE_ID}-${SANITIZED_TITLE}"
    fi
    
    echo "Generated branch name: $branch"
  else
    branch="$1"
  fi
  
  workdir="$top/$branch"
  if git worktree add -b "$branch" "$workdir" master; then
    # Get repo name - use top directory for all repos
    repo_name=$(basename "$top")
    # Format branch name
    session_name="${repo_name}_${branch}"
    
    # Debug output
    echo "DEBUG: Creating session - repo_name='$repo_name', branch='$branch', session_name='$session_name'"
    
    # Check if already in a tmux session
    if [ -z "$TMUX" ]; then
      # Not in a tmux session, create or attach to one
      if tmux has-session -t "$session_name" 2>/dev/null; then
        tmux attach-session -t "$session_name"
      else
        tmux new-session -s "$session_name" -c "$workdir"
      fi
    else
      # Already in a tmux session, switch to the session directly
      if tmux has-session -t "$session_name" 2>/dev/null; then
        tmux switch-client -t "$session_name"
      else
        tmux new-session -d -s "$session_name" -c "$workdir"
        tmux switch-client -t "$session_name"
      fi
    fi
  fi
else
  echo "Remote branches:"
  git fetch --prune
  branch=$(git branch -r | grep -v HEAD | sed 's|.*origin/||' | sed 's/^[[:space:]]*//' | sort -u | fzf | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')

  if [ -n "$branch" ]; then
    remote="origin/$branch"
    workdir="$top/$branch"
    git fetch origin "$branch:$branch.new" || {
      echo " fetch failed (branch $branch not found on origin?)"
      exit 1
    }
    worktree_created=false
    if git show-ref --verify --quiet refs/heads/"$branch"; then
      # Branch exists locally, use it
      if git worktree add "$workdir" "$branch"; then
        git update-ref -d refs/heads/"$branch.new" 2>/dev/null
        worktree_created=true
      else
        echo "Failed to create worktree for existing branch '$branch'"
        exit 1
      fi
    else
      # Branch doesn't exist locally, create it from remote
      if git worktree add -b "$branch" "$workdir" "$remote"; then
        git update-ref -d refs/heads/"$branch.new" 2>/dev/null
        worktree_created=true
      else
        echo "Failed to create worktree for new branch '$branch'"
        exit 1
      fi
    fi
    
    if [ "$worktree_created" = true ]; then
      # Get repo name - use top directory for all repos
      repo_name=$(basename "$top")
      # Format branch name for session
      formatted_branch=$(echo "$branch" | tr '/' '-')
      session_name="${repo_name}_${formatted_branch}"
      
      # Debug output
      echo "DEBUG: Creating session (remote) - repo_name='$repo_name', formatted_branch='$formatted_branch', session_name='$session_name'"
      
      # Check if already in a tmux session
      if [ -z "$TMUX" ]; then
        # Not in a tmux session, create or attach to one
        if tmux has-session -t "$session_name" 2>/dev/null; then
          tmux attach-session -t "$session_name"
        else
          tmux new-session -s "$session_name" -c "$workdir"
        fi
      else
        # Already in a tmux session, switch to the session directly
        if tmux has-session -t "$session_name" 2>/dev/null; then
          tmux switch-client -t "$session_name"
        else
          tmux new-session -d -s "$session_name" -c "$workdir"
          tmux switch-client -t "$session_name"
        fi
      fi
    fi
  fi
fi
