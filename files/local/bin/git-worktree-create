#!/usr/bin/env bash

git_dir=$(git rev-parse --git-common-dir 2>/dev/null) || {
  echo "Not in a git repo"
  exit 1
}

# For worktree structure: my_project/master/, my_project/feature/
# git-common-dir points to my_project/master/.git
# We need to go up two levels: .git -> master -> my_project
# Use realpath to ensure we get absolute paths
git_dir_abs="$(realpath "$git_dir")"
worktree_dir="$(dirname "$git_dir_abs")"
top="$(dirname "$worktree_dir")"

if [ $# -ne 0 ]; then
  branch="$1"
  workdir="$top/$branch"
  if git worktree add -b "$branch" "$workdir" master; then
    # Get repo name - use top directory for all repos
    repo_name=$(basename "$top")
    # Format branch name
    session_name="${repo_name}_${branch}"
    
    # Debug output
    echo "DEBUG: Creating session - repo_name='$repo_name', branch='$branch', session_name='$session_name'"
    
    # Check if already in a tmux session
    if [ -z "$TMUX" ]; then
      # Not in a tmux session, create or attach to one
      if tmux has-session -t "$session_name" 2>/dev/null; then
        tmux attach-session -t "$session_name"
      else
        tmux new-session -s "$session_name" -c "$workdir"
      fi
    else
      # Already in a tmux session, switch to the session directly
      if tmux has-session -t "$session_name" 2>/dev/null; then
        tmux switch-client -t "$session_name"
      else
        tmux new-session -d -s "$session_name" -c "$workdir"
        tmux switch-client -t "$session_name"
      fi
    fi
  fi
else
  echo "Remote branches:"
  git fetch --prune
  branch=$(git branch -r | grep -v HEAD | sed 's|.*origin/||' | sed 's/^[[:space:]]*//' | sort -u | fzf | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')

  if [ -n "$branch" ]; then
    remote="origin/$branch"
    workdir="$top/$branch"
    git fetch origin "$branch:$branch.new" || {
      echo " fetch failed (branch $branch not found on origin?)"
      exit 1
    }
    worktree_created=false
    if git show-ref --verify --quiet refs/heads/"$branch"; then
      # Branch exists locally, use it
      if git worktree add "$workdir" "$branch"; then
        git update-ref -d refs/heads/"$branch.new" 2>/dev/null
        worktree_created=true
      else
        echo "Failed to create worktree for existing branch '$branch'"
        exit 1
      fi
    else
      # Branch doesn't exist locally, create it from remote
      if git worktree add -b "$branch" "$workdir" "$remote"; then
        git update-ref -d refs/heads/"$branch.new" 2>/dev/null
        worktree_created=true
      else
        echo "Failed to create worktree for new branch '$branch'"
        exit 1
      fi
    fi
    
    if [ "$worktree_created" = true ]; then
      # Get repo name - use top directory for all repos
      repo_name=$(basename "$top")
      # Format branch name for session
      formatted_branch=$(echo "$branch" | tr '/' '-')
      session_name="${repo_name}_${formatted_branch}"
      
      # Debug output
      echo "DEBUG: Creating session (remote) - repo_name='$repo_name', formatted_branch='$formatted_branch', session_name='$session_name'"
      
      # Check if already in a tmux session
      if [ -z "$TMUX" ]; then
        # Not in a tmux session, create or attach to one
        if tmux has-session -t "$session_name" 2>/dev/null; then
          tmux attach-session -t "$session_name"
        else
          tmux new-session -s "$session_name" -c "$workdir"
        fi
      else
        # Already in a tmux session, switch to the session directly
        if tmux has-session -t "$session_name" 2>/dev/null; then
          tmux switch-client -t "$session_name"
        else
          tmux new-session -d -s "$session_name" -c "$workdir"
          tmux switch-client -t "$session_name"
        fi
      fi
    fi
  fi
fi

# Create Claude settings symlink if it exists in the project root
if [ -f "$top/.claude/settings.local.json" ]; then
  mkdir -p "$workdir/.claude"
  ln -sf "$top/.claude/settings.local.json" "$workdir/.claude/settings.local.json"
  echo "Created symlink for .claude/settings.local.json"
fi
