#!/usr/bin/env bash

# Source helper functions
source "$(dirname "${BASH_SOURCE[0]}")/tmux_helpers"

# Handle different modes of operation
file_to_open="$1"
line_number="$2"

# Setup session-specific server socket
session_name=$(tmux display-message -p '#{session_name}')
server_socket="/tmp/nvim-server-${session_name}.pipe"

# Helper functions
build_nvim_command() {
    local cmd="nvim --listen $server_socket"
    if [ -n "$file_to_open" ]; then
        [ -n "$line_number" ] && cmd="$cmd +$line_number"
        cmd="$cmd \"$file_to_open\""
    fi
    echo "$cmd"
}

send_remote_command() {
    local cmd="<cmd>e"
    [ -n "$line_number" ] && cmd="$cmd +$line_number"
    cmd="$cmd $file_to_open<cr><cmd>filetype detect<cr>"
    nvim --server "$server_socket" --remote-send "$cmd"
}

# Check if nvim pane exists
if pane_exists "nvim_pane"; then
    # Nvim pane exists
    if [ -n "$file_to_open" ]; then
        # Open file in existing instance and switch to it
        send_remote_command
        switch_to_titled_pane "nvim_pane"
    elif is_current_pane_titled "nvim_pane"; then
        # In nvim pane with no file - relaunch
        eval "$(build_nvim_command)"
    else
        # Just switch to existing nvim pane
        switch_to_titled_pane "nvim_pane"
    fi
else
    # Check if current pane has default title - use it instead of creating new window
    if is_current_pane_default; then
        # Convert current pane to nvim pane
        convert_current_pane "nvim_pane" "nvim"
        tmux send-keys "$(build_nvim_command)" C-m
    else
        # Create new nvim window and launch
        create_titled_window "nvim_pane" "nvim"
        tmux send-keys "$(build_nvim_command)" C-m
    fi
fi