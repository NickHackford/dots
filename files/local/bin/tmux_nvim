#!/usr/bin/env bash

# Handle different modes of operation
file_to_open="$1"
line_number="$2"

# Setup session-specific server socket
session_name=$(tmux display-message -p '#{session_name}')
server_socket="/tmp/nvim-server-${session_name}.pipe"

# Helper functions
switch_to_nvim_pane() {
    local pane_id="$1"
    local window_id=$(tmux list-panes -s -F "#{pane_id} #{window_id}" | grep "$pane_id" | cut -d' ' -f2)
    tmux select-window -t "$window_id"
    tmux select-pane -t "$pane_id"
}

build_nvim_command() {
    local cmd="nvim --listen $server_socket"
    if [ -n "$file_to_open" ]; then
        [ -n "$line_number" ] && cmd="$cmd +$line_number"
        cmd="$cmd \"$file_to_open\""
    fi
    echo "$cmd"
}

send_remote_command() {
    local cmd="<cmd>e"
    [ -n "$line_number" ] && cmd="$cmd +$line_number"
    cmd="$cmd $file_to_open<cr><cmd>filetype detect<cr>"
    nvim --server "$server_socket" --remote-send "$cmd"
}

# Check if nvim pane exists
nvim_pane=$(tmux list-panes -s -F "#{pane_id} #{pane_start_command}" | grep ": nvim_pane;" | head -1 | cut -d' ' -f1)

if [[ -n "$nvim_pane" ]]; then
    # Nvim pane exists
    if [ -n "$file_to_open" ]; then
        # Open file in existing instance and switch to it
        send_remote_command
        switch_to_nvim_pane "$nvim_pane"
    elif [ "$(tmux display-message -p '#{pane_id}')" = "$nvim_pane" ]; then
        # In nvim pane with no file - relaunch
        eval "$(build_nvim_command)"
    else
        # Just switch to existing nvim pane
        switch_to_nvim_pane "$nvim_pane"
    fi
else
    # Create new nvim window and launch
    tmux new-window -n nvim ": nvim_pane; exec zsh"
    tmux send-keys "$(build_nvim_command)" C-m
fi