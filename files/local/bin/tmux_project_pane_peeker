#!/usr/bin/env bash

# FZF-based project pane picker with live preview
# Usage: tmux_project_pane_peeker <pane_type>
# Example: tmux_project_pane_peeker agent  # looks for agent_pane
#          tmux_project_pane_peeker nvim   # looks for nvim_pane

# Check if argument is provided
if [[ $# -eq 0 ]]; then
    echo "Usage: $0 <pane_type>"
    echo "Example: $0 agent"
    echo "         $0 nvim"
    echo "         $0 yazi"
    exit 1
fi

pane_type="$1"

# Get all project panes of the specified type and format them nicely
get_project_panes() {
    local panes_data
    panes_data=$(tmux list-panes -a -F "#{?window_bell_flag,,󰇘}|#{session_name}|#{pane_id}|#{pane_current_command}|#{pane_title}" |
        grep "${pane_type}")

    # Calculate the width of the longest session name
    local max_session_width
    max_session_width=$(echo "$panes_data" | cut -d'|' -f2 | wc -L)

    # Calculate total available width for session + command (original session width)
    local total_left_width
    total_left_width=$(($(tput cols) * 40 / 100 - 11))

    # Calculate command column width (remaining space after session + " - ")
    local command_width
    command_width=$((total_left_width - max_session_width - 3))

    # Format with calculated widths and sort by symbol priority
    echo "$panes_data" | while IFS='|' read symbol session_name pane_id current_command pane_title; do
        # If pane title indicates working, mark with ~ regardless of bell/activity
        if echo "$pane_title" | grep -qi "agent_pane: *working"; then
            symbol='󰜎'
        fi
        # Check if pane title contains bender and has a running process
        if echo "$pane_title" | grep -qi "bender" && [[ "$current_command" != "bash" && "$current_command" != "zsh" && "$current_command" != "sh" ]]; then
            symbol='󰚩'
        # Generic process icon for any non-shell process
        elif [[ "$current_command" != "bash" && "$current_command" != "zsh" && "$current_command" != "sh" ]]; then
            symbol=''
        fi
        printf "%-1s %-*s - %-*s %s\n" "$symbol" "$max_session_width" "$session_name" "$command_width" "$current_command" "$pane_id"
    done | sort -k1,1 -t' ' --key=1.1,1.1 -s | {
        # Custom sort
        awk '{
            if ($1 == "") print "1", $0
            else if ($1 == "󰜎") print "2", $0
            else if ($1 == "󰚩") print "3", $0  
            else if ($1 == "") print "4", $0  
            else print "5", $0
        }' | sort -k1,1n | cut -d" " -f2-
    }
}

# Use fzf to select and preview
selected=$(get_project_panes | fzf \
    --ansi \
    --layout=reverse \
    --border \
    --preview="
        session_name=\$(echo {} | awk '{print \$2}')
        pane_id=\$(echo {} | awk '{print \$NF}')
        preview_height=\$(($(tput lines) - 7))
        echo \"=== \$session_name (${pane_type} pane) ===\"
        echo
        tmux capture-pane -t \"\$pane_id\" -e -p | grep -v '^[[:space:]]*$' | tail -\$preview_height
    " \
    --preview-window=right:60% \
    --header="Select the ${pane_type} pane to switch to")

if [[ -n "$selected" ]]; then
    session_name=$(echo "$selected" | awk '{print $2}')
    pane_id=$(echo "$selected" | awk '{print $NF}')

    # Get the window containing this pane
    target_window=$(tmux list-panes -a -F "#{pane_id} #{session_name}:#{window_id}" | grep "^$pane_id " | cut -d' ' -f2)

    # Switch to the session and window, then select the pane
    tmux switch-client -t "$target_window"
    tmux select-pane -t "$pane_id"
fi
